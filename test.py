"""
sample.mp3 - speech generated by the ttsmp3.com site from first
four sentences of Zen of Python.
Length of the sample.mp3 is 7628ms.
"""

import unittest
from pydub import AudioSegment
from split_speech import SoundFile


class TestSplitSpeech(unittest.TestCase):

    # Detected silences: [[1407, 1912], [3397, 3945], [5426, 5876]]
    # all values are in milliseconds
    begining_of_sample = 0
    end_of_sample = 7628
    first_silence_start = 1407
    first_silence_end = 1912
    second_silence_start = 3397
    second_silence_end = 3945
    third_silence_start = 5426
    third_silence_end = 5876
    first_chunk_length = first_silence_start - begining_of_sample
    second_chunk_length = second_silence_start - first_silence_end
    third_chunk_length = third_silence_start - second_silence_end
    fourth_chunk_length = end_of_sample - third_silence_end

    def setUp(self):
        self.sample = SoundFile("sample.mp3")

    def test_should_detect_three_silences(self):
        """
        Test if finds three silences.
        """
        number_of_silences = 3
        silences = self.sample.get_silences()

        self.assertEqual(len(silences), number_of_silences,
                         f"Should be {number_of_silences}")

    def test_get_correct_chunk_length(self):
        """
        Test if gets the correct length of speech (not silence). After the chunk
        will be added some length of silence. 
        """
        silences = self.sample.get_silences()

        chunks = self.sample.generate_speech_chunks()
        first_length = chunks[0][1] - chunks[0][0]
        second_length = chunks[1][1] - chunks[1][0]
        third_length = chunks[2][1] - chunks[2][0]
        fourth_length = chunks[3][1] - chunks[3][0]

        self.assertEqual(self.first_chunk_length, first_length)
        self.assertEqual(self.second_chunk_length, second_length)
        self.assertEqual(self.third_chunk_length, third_length)
        self.assertEqual(self.fourth_chunk_length, fourth_length)

    def test_resulting_audio_have_proper_length(self):
        """
        Test if resulting audio have proper length.
        """
        percentage_of_speech = 100
        resulting_length = self.end_of_sample + (self.end_of_sample *
                                                 percentage_of_speech / 100)

        self.sample.detect_silences()
        self.sample.generate_speech_chunks()
        self.sample.extend_silences()

        self.assertEqual(len(self.sample.resulting_sound), resulting_length)

    @unittest.skip("not yet implemented")
    def test_parameters_properly_assigned(self):
        """
        Test if parameters passed to the script are properly assigned
        """
        pass


if __name__ == "__main__ ":
    unittest.main()